$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 0 clk1 $end
  $var wire 1 1 clk2 $end
  $var wire 1 2 clk3 $end
  $var wire 1 3 rst $end
  $var wire 16 4 input_data [15:0] $end
  $var wire 6 5 key_bits [5:0] $end
  $var wire 16 6 output_data [15:0] $end
  $scope module cryptoveril $end
   $var wire 1 0 clk1 $end
   $var wire 1 1 clk2 $end
   $var wire 1 2 clk3 $end
   $var wire 1 3 rst $end
   $var wire 16 4 input_data [15:0] $end
   $var wire 6 5 key_bits [5:0] $end
   $var wire 16 6 output_data [15:0] $end
   $var wire 16 # stage1_out [15:0] $end
   $var wire 1 $ stage1_valid $end
   $var wire 1 % buf1_ready $end
   $var wire 16 & buf1_out [15:0] $end
   $var wire 1 7 buf1_valid $end
   $var wire 1 ) stage2_ready $end
   $var wire 16 * stage2_out [15:0] $end
   $var wire 1 + stage2_valid $end
   $var wire 1 , buf2_ready $end
   $var wire 16 - buf2_out [15:0] $end
   $var wire 1 8 buf2_valid $end
   $var wire 1 9 stage3_ready $end
   $var wire 1 : stage3_valid $end
   $scope module u_buffer1 $end
    $var wire 1 0 clk $end
    $var wire 1 3 rst $end
    $var wire 16 # data_in [15:0] $end
    $var wire 1 $ valid_in $end
    $var wire 1 % ready_out $end
    $var wire 16 & data_out [15:0] $end
    $var wire 1 7 valid_out $end
    $var wire 1 ) ready_in $end
    $var wire 16 ' buffer [15:0] $end
    $var wire 1 ( full $end
   $upscope $end
   $scope module u_buffer2 $end
    $var wire 1 1 clk $end
    $var wire 1 3 rst $end
    $var wire 16 * data_in [15:0] $end
    $var wire 1 + valid_in $end
    $var wire 1 , ready_out $end
    $var wire 16 - data_out [15:0] $end
    $var wire 1 8 valid_out $end
    $var wire 1 9 ready_in $end
    $var wire 16 . buffer [15:0] $end
    $var wire 1 / full $end
   $upscope $end
   $scope module u_stage1 $end
    $var wire 1 0 clk $end
    $var wire 1 3 rst $end
    $var wire 1 ? valid_in $end
    $var wire 16 4 in_data [15:0] $end
    $var wire 3 ; key_bits [2:0] $end
    $var wire 16 # out_data [15:0] $end
    $var wire 1 $ valid_out $end
   $upscope $end
   $scope module u_stage2 $end
    $var wire 1 1 clk $end
    $var wire 1 3 rst $end
    $var wire 1 7 valid_in $end
    $var wire 16 & in_data [15:0] $end
    $var wire 2 < key_bits [1:0] $end
    $var wire 1 , ready_in $end
    $var wire 16 * out_data [15:0] $end
    $var wire 1 + valid_out $end
    $var wire 1 ) ready_out $end
    $var wire 2 = state [1:0] $end
    $var wire 2 > next_state [1:0] $end
    $var wire 2 @ S0 [1:0] $end
    $var wire 2 A S1 [1:0] $end
    $var wire 2 B S2 [1:0] $end
    $var wire 2 C S3 [1:0] $end
   $upscope $end
   $scope module u_stage3 $end
    $var wire 1 2 clk $end
    $var wire 1 3 rst $end
    $var wire 1 8 valid_in $end
    $var wire 1 ? ready_in $end
    $var wire 16 - in_data [15:0] $end
    $var wire 16 6 out_data [15:0] $end
    $var wire 1 : valid_out $end
    $var wire 1 9 ready_out $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000 #
0$
0%
b0000000000000000 &
b0000000000000000 '
0(
0)
b0000000000000000 *
0+
0,
b0000000000000000 -
b0000000000000000 .
0/
10
11
12
13
b0001001000110100 4
b101011 5
b0000000000000000 6
07
08
09
0:
b011 ;
b01 <
b00 =
b01 >
1?
b00 @
b01 A
b10 B
b11 C
#1
00
#2
1%
10
#3
00
01
#4
10
#5
00
11
02
03
#6
b1001000110100011 #
1$
10
#7
00
#8
0%
b1001000110100011 '
1(
10
17
#9
00
#10
10
07
#11
00
01
#12
10
#13
00
#14
10
#15
00
#16
10
#17
00
11
#18
10
#19
00
#20
10
#21
00
#22
10
#23
00
01
12
#24
10
#25
00
#26
10
#27
00
#28
10
#29
00
11
#30
10
#31
00
#32
10
#33
00
#34
10
#35
00
01
#36
10
#37
00
#38
10
#39
00
#40
10
#41
00
11
02
#42
10
#43
00
#44
10
#45
00
#46
10
#47
00
01
#48
10
#49
00
#50
10
#51
00
#52
10
#53
00
11
#54
10
#55
00
#56
10
#57
00
#58
10
#59
00
01
12
#60
10
#61
00
#62
10
#63
00
#64
10
#65
00
11
#66
10
#67
00
#68
10
#69
00
#70
10
#71
00
01
#72
10
#73
00
#74
10
#75
00
#76
10
#77
00
11
02
#78
10
#79
00
#80
10
#81
00
#82
10
#83
00
01
#84
10
#85
00
#86
10
#87
00
#88
10
#89
00
11
#90
10
#91
00
#92
10
#93
00
#94
10
#95
00
01
12
#96
10
#97
00
#98
10
#99
00
#100
10
#101
00
11
#102
10
#103
00
#104
10
#105
00
#106
10
#107
00
01
#108
10
#109
00
#110
10
#111
00
#112
10
#113
00
11
02
#114
10
#115
00
#116
10
#117
00
#118
10
#119
00
01
#120
10
#121
00
#122
10
#123
00
#124
10
#125
00
11
#126
10
#127
00
#128
10
#129
00
#130
10
#131
00
01
12
#132
10
#133
00
#134
10
#135
00
#136
10
#137
00
11
#138
10
#139
00
#140
10
#141
00
#142
10
#143
00
01
#144
10
#145
00
#146
10
#147
00
#148
10
#149
00
11
02
#150
10
#151
00
#152
10
#153
00
#154
10
#155
00
01
#156
10
#157
00
#158
10
#159
00
#160
10
#161
00
11
#162
10
#163
00
#164
10
#165
00
#166
10
#167
00
01
12
#168
10
#169
00
#170
10
#171
00
#172
10
#173
00
11
#174
10
#175
00
#176
10
#177
00
#178
10
#179
00
01
#180
10
#181
00
#182
10
#183
00
#184
10
#185
00
11
02
#186
10
#187
00
#188
10
#189
00
#190
10
#191
00
01
#192
10
#193
00
#194
10
#195
00
#196
10
#197
00
11
#198
10
#199
00
#200
10
#201
00
#202
10
#203
00
01
12
#204
10
#205
00
#206
10
#207
00
#208
10
#209
00
11
#210
10
#211
00
#212
10
#213
00
#214
10
#215
00
01
#216
10
#217
00
#218
10
#219
00
#220
10
#221
00
11
02
#222
10
#223
00
#224
10
#225
00
#226
10
#227
00
01
#228
10
#229
00
#230
10
#231
00
#232
10
#233
00
11
#234
10
#235
00
#236
10
#237
00
#238
10
#239
00
01
12
#240
10
#241
00
#242
10
#243
00
#244
10
#245
00
11
#246
10
#247
00
#248
10
#249
00
#250
10
#251
00
01
#252
10
#253
00
#254
10
#255
00
#256
10
#257
00
11
02
#258
10
#259
00
#260
10
#261
00
#262
10
#263
00
01
#264
10
#265
00
#266
10
#267
00
#268
10
#269
00
11
#270
10
#271
00
#272
10
#273
00
#274
10
#275
00
01
12
#276
10
#277
00
#278
10
#279
00
#280
10
#281
00
11
#282
10
#283
00
#284
10
#285
00
#286
10
#287
00
01
#288
10
#289
00
#290
10
#291
00
#292
10
#293
00
11
02
#294
10
#295
00
#296
10
#297
00
#298
10
#299
00
01
#300
10
#301
00
#302
10
#303
00
#304
10
