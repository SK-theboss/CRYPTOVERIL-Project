$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 0 clk1 $end
  $var wire 1 1 clk2 $end
  $var wire 1 2 clk3 $end
  $var wire 1 3 rst $end
  $var wire 16 4 input_data [15:0] $end
  $var wire 6 5 key_bits [5:0] $end
  $var wire 16 6 output_data [15:0] $end
  $scope module cryptoveril $end
   $var wire 1 0 clk1 $end
   $var wire 1 1 clk2 $end
   $var wire 1 2 clk3 $end
   $var wire 1 3 rst $end
   $var wire 16 4 input_data [15:0] $end
   $var wire 6 5 key_bits [5:0] $end
   $var wire 16 6 output_data [15:0] $end
   $var wire 16 ( stage1_out [15:0] $end
   $var wire 1 ) stage1_valid $end
   $var wire 1 * buf1_ready $end
   $var wire 16 + buf1_out [15:0] $end
   $var wire 1 7 buf1_valid $end
   $var wire 1 - stage2_ready $end
   $var wire 16 # stage2_out [15:0] $end
   $var wire 1 $ stage2_valid $end
   $var wire 1 . buf2_ready $end
   $var wire 16 % buf2_out [15:0] $end
   $var wire 1 / buf2_valid $end
   $var wire 1 8 stage3_ready $end
   $var wire 1 9 stage3_valid $end
   $scope module u_buf1 $end
    $var wire 1 0 clk $end
    $var wire 1 3 rst $end
    $var wire 16 ( data_in [15:0] $end
    $var wire 1 ) valid_in $end
    $var wire 1 * ready_out $end
    $var wire 16 + data_out [15:0] $end
    $var wire 1 7 valid_out $end
    $var wire 1 - ready_in $end
    $var wire 1 , full $end
   $upscope $end
   $scope module u_buf2 $end
    $var wire 1 1 clk $end
    $var wire 1 3 rst $end
    $var wire 16 # data_in [15:0] $end
    $var wire 1 $ valid_in $end
    $var wire 1 . ready_out $end
    $var wire 16 % data_out [15:0] $end
    $var wire 1 / valid_out $end
    $var wire 1 8 ready_in $end
    $var wire 1 & full $end
   $upscope $end
   $scope module u_stage1 $end
    $var wire 1 0 clk $end
    $var wire 1 3 rst $end
    $var wire 1 = valid_in $end
    $var wire 16 4 in_data [15:0] $end
    $var wire 3 : key_bits [2:0] $end
    $var wire 16 ( out_data [15:0] $end
    $var wire 1 ) valid_out $end
   $upscope $end
   $scope module u_stage2 $end
    $var wire 1 1 clk $end
    $var wire 1 3 rst $end
    $var wire 1 7 valid_in $end
    $var wire 16 + in_data [15:0] $end
    $var wire 2 ; key_bits [1:0] $end
    $var wire 1 . ready_in $end
    $var wire 16 # out_data [15:0] $end
    $var wire 1 $ valid_out $end
    $var wire 1 - ready_out $end
    $var wire 2 ' state [1:0] $end
    $var wire 2 < next_state [1:0] $end
    $var wire 2 > S0 [1:0] $end
    $var wire 2 ? S1 [1:0] $end
    $var wire 2 @ S2 [1:0] $end
    $var wire 2 A S3 [1:0] $end
   $upscope $end
   $scope module u_stage3 $end
    $var wire 1 2 clk $end
    $var wire 1 3 rst $end
    $var wire 1 / valid_in $end
    $var wire 1 = ready_in $end
    $var wire 16 % in_data [15:0] $end
    $var wire 16 6 out_data [15:0] $end
    $var wire 1 9 valid_out $end
    $var wire 1 8 ready_out $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000 #
0$
b0000000000000000 %
0&
b00 '
b0000000000000000 (
0)
0*
b0000000000000000 +
0,
0-
0.
0/
00
01
02
13
b0000000000000000 4
b000000 5
b0000000000000000 6
07
08
09
b000 :
b00 ;
b00 <
1=
b00 >
b01 ?
b10 @
b11 A
#1
b1001000110100011 (
1)
10
11
12
03
b0001001000110100 4
b101011 5
b011 :
b01 ;
b01 <
#2
00
#3
10
#4
00
01
#5
10
#6
00
#7
10
11
#8
00
#9
10
#10
00
01
02
#11
10
#12
00
#13
10
11
#14
00
#15
10
#16
00
01
#17
10
#18
00
#19
10
11
12
#20
00
#21
10
#22
00
01
#23
10
#24
00
#25
10
11
#26
00
#27
10
#28
00
01
02
#29
10
#30
00
#31
10
11
#32
00
#33
10
#34
00
01
#35
10
#36
00
#37
10
11
12
#38
00
#39
10
#40
00
01
#41
10
#42
00
#43
10
11
#44
00
#45
10
#46
00
01
02
#47
10
#48
00
#49
10
11
#50
00
#51
10
#52
00
01
#53
10
#54
00
#55
10
11
12
#56
00
#57
10
#58
00
01
#59
10
#60
00
#61
10
11
#62
00
#63
10
#64
00
01
02
#65
10
#66
00
#67
10
11
#68
00
#69
10
#70
00
01
#71
10
#72
00
#73
10
11
12
#74
00
#75
10
#76
00
01
#77
10
#78
00
#79
10
11
#80
00
#81
10
#82
00
01
02
#83
10
#84
00
#85
10
11
#86
00
#87
10
#88
00
01
#89
10
#90
00
#91
10
11
12
#92
00
#93
10
#94
00
01
#95
10
#96
00
#97
10
11
#98
00
#99
10
#100
00
01
02
#101
10
#102
00
#103
10
11
#104
00
#105
10
#106
00
01
#107
10
#108
00
#109
10
11
12
#110
00
#111
10
#112
00
01
#113
10
#114
00
#115
10
11
#116
00
#117
10
#118
00
01
02
#119
10
#120
00
#121
10
11
#122
00
#123
10
#124
00
01
#125
10
#126
00
#127
10
11
12
#128
00
#129
10
#130
00
01
#131
10
#132
00
#133
10
11
#134
00
#135
10
#136
00
01
02
#137
10
#138
00
#139
10
11
#140
00
#141
10
#142
00
01
#143
10
#144
00
#145
10
11
12
#146
00
#147
10
#148
00
01
#149
10
#150
00
#151
10
11
#152
00
#153
10
#154
00
01
02
#155
10
#156
00
#157
10
11
#158
00
#159
10
#160
00
01
#161
10
#162
00
#163
10
11
12
#164
00
#165
10
#166
00
01
#167
10
#168
00
#169
10
11
#170
00
#171
10
#172
00
01
02
#173
10
#174
00
#175
10
11
#176
00
#177
10
#178
00
01
#179
10
#180
00
#181
10
11
12
#182
00
#183
10
#184
00
01
#185
10
#186
00
#187
10
11
#188
00
#189
10
#190
00
01
02
#191
10
#192
00
#193
10
11
#194
00
#195
10
#196
00
01
#197
10
#198
00
#199
10
11
12
#200
00
#201
10
#202
00
01
#203
10
#204
00
#205
10
11
#206
00
#207
10
#208
00
01
02
#209
10
#210
00
#211
10
11
#212
00
#213
10
#214
00
01
#215
10
#216
00
#217
10
11
12
#218
00
#219
10
#220
00
01
#221
10
#222
00
#223
10
11
#224
00
#225
10
#226
00
01
02
#227
10
#228
00
#229
10
11
#230
00
#231
10
#232
00
01
#233
10
#234
00
#235
10
11
12
#236
00
#237
10
#238
00
01
#239
10
#240
00
#241
10
11
#242
00
#243
10
#244
00
01
02
#245
10
#246
00
#247
10
11
#248
00
#249
10
#250
00
01
#251
10
#252
00
#253
10
11
12
#254
00
#255
10
#256
00
01
#257
10
#258
00
#259
10
11
#260
00
#261
10
#262
00
01
02
#263
10
#264
00
#265
10
11
#266
00
#267
10
#268
00
01
#269
10
#270
00
#271
10
11
12
#272
00
#273
10
#274
00
01
#275
10
#276
00
#277
10
11
#278
00
#279
10
#280
00
01
02
#281
10
#282
00
#283
10
11
#284
00
#285
10
#286
00
01
#287
10
#288
00
#289
10
11
12
#290
00
#291
10
#292
00
01
#293
10
#294
00
#295
10
11
#296
00
#297
10
#298
00
01
02
#299
10
#300
00
